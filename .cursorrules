# FlexPress WordPress Theme Development Rules

## Project Overview

FlexPress is a premium WordPress theme for content creators (primarily adult content) that integrates:

- **Flowguard Payment System** - Modern embedded payment processing with webhooks
- **BunnyCDN Stream & Storage** - Video streaming and file hosting
- **Advanced Content Management** - Episodes, models, galleries, access control
- **Comprehensive Admin System** - Built-in settings and management tools

This is a WordPress website project running in Docker containers with the following setup:

- WordPress: Port 8085 (use IP instead of localhost)
- phpMyAdmin: Port 8086 (use IP instead of localhost)
- MySQL Database: Internal container network
- Live Site: https://zakspov.com (production site)
- Test Site: https://zakspov.com (development data only)

Do all pupeteer tests on the test site.

### Newsletter & Turnstile Rules

- Newsletter modal includes Cloudflare Turnstile widget rendered on modal open
- Use `cf-turnstile` class and stable element id `newsletter-turnstile`
- Access token via `turnstile.getResponse(widgetId)`; reset via `turnstile.reset(widgetId)`
- Add defensive guards if `window.turnstile` is not ready
- Persist dismissal using localStorage key `flexpress_newsletter_modal_dismissed`; gate auto-show by this flag

## Docker Configuration

- Main service: `wordpress` (custom build)
- Database: `mysql:8.0`
- Admin: `phpmyadmin/phpmyadmin`
- Network: `flexpress_network`

## Development Guidelines

- Always use IP addresses instead of localhost when configuring servers
- Avoid port 3000 (reserved for MCP tools)
- Use port 8085 for WordPress (8083 was occupied)
- **ALL DEVELOPMENT WORK MUST BE CONTAINED WITHIN THE FLEXPRESS THEME DIRECTORY** (`wp-content/themes/flexpress/`)
- **ALWAYS UPDATE README.md AS FEATURES ARE DEVELOPED** - Document new features, integrations, and capabilities
- All WordPress customizations go in `wp-content/` directory
- Database credentials are in `.env` file

## File Structure

```
flexpress/
├── docker-compose.yml    # Main Docker configuration
├── Dockerfile           # Custom WordPress image (includes WP-CLI)
├── apache-config.conf   # Apache configuration
├── wp-cli.sh            # WP-CLI wrapper script
├── .env                 # Environment variables
├── .env.example         # Environment template
├── wp-content/          # WordPress customizations
└── README.md            # Project documentation
```

## Commands

- Start: `docker-compose up -d`
- Stop: `docker-compose down`
- Logs: `docker-compose logs -f`
- Rebuild: `docker-compose up --build -d`
- WP-CLI: `./wp-cli.sh [command]` (e.g., `./wp-cli.sh --version`, `./wp-cli.sh help`)

## Admin Tools

- FlexPress → Tools includes:
  - Episode Date Synchronization utilities
  - Clear debug.log: truncates `wp-content/debug.log` with nonce + capability checks

### Admin Menu Structure (Consolidated)

- All settings live under the top-level `FlexPress` menu.
- Removed duplicates/standalone items: Flowguard and Discord top-level menus removed; Turnstile and Plunk registered only once as FlexPress submenus.
- Admin page hooks use `flexpress-settings_page_*` for enqueue logic.

## Theme Features & Integrations

### Core Integrations

- **Flowguard Payment System**: Complete payment processing with embedded forms, webhooks, subscriptions, PPV purchases
- **BunnyCDN Stream**: Video hosting, streaming, and thumbnail generation
- **BunnyCDN Storage**: Image galleries and file management
- **Advanced Custom Fields (ACF)**: Content management and admin interfaces
- **Discord Notifications**: Multi-channel webhook system for real-time team alerts
- **Google SMTP Integration**: Reliable email delivery for internal communications and contact forms
- **SMTP2Go Integration**: Professional email delivery service with automatic domain authentication

### Discord Integration System

#### Multi-Channel Webhook Architecture

- **Default Webhook**: Fallback for all notifications (`webhook_url`)
- **Financial Webhook**: Payment/subscription events (`webhook_url_financial`)
- **Contact Webhook**: Form submissions and talent applications (`webhook_url_contact`)

#### Critical Implementation Rules

- **Data Validation**: ALL Discord data must be validated before sending to prevent 400 errors
- **Array Handling**: Contact Form 7 arrays MUST be converted to strings using `implode()` before `strlen()` operations
- **Character Limits**: Field values truncated to 1024 chars, titles to 256 chars, descriptions to 4096 chars
- **Field Limits**: Maximum 25 fields per Discord embed
- **Markdown Removal**: Strip `<`, `>`, `` ` ``, `*`, `_`, `~` from field values
- **Empty Value Handling**: Replace empty values with "Not provided" text

#### Discord Settings Management

- **Primary Settings Class**: `class-flexpress-settings.php` (NOT `class-flexpress-discord-settings.php`)
- **Registration Pattern**: All webhook fields registered in `flexpress_discord_settings` option group
- **Sanitization**: `flexpress_sanitize_discord_settings()` handles all webhook URL validation
- **Default Values**: Empty strings for all webhook URLs in `flexpress_set_default_theme_options()`

#### Contact Form 7 Integration Rules

- **Casting Form Fields**: Include ALL fields (name, email, gender_identity, stage_age, instagram, twitter, about_you, agreement)
- **Array Detection**: Use `is_array()` check before string operations
- **Sanitization Function**: `$sanitize_field_value` helper handles arrays, markdown removal, truncation
- **Form Title**: Always include form title in Discord notification fields
- **Timestamp**: Add submission timestamp as final field

#### Error Handling & Debugging

- **Enhanced Logging**: Include Discord response body and full payload in error logs
- **Status Code Tracking**: Log HTTP status codes for debugging
- **Payload Validation**: Log complete payload structure for troubleshooting
- **Channel Type Logging**: Track which webhook URL is being used for each notification

### Content Management

- **Episodes**: Video content with access control (free/PPV/membership/mixed)
- **Models**: Performer profiles with relationship linking and homepage visibility control
- **Galleries**: Image galleries attached to episodes with BunnyCDN Storage
- **Access Control**: Flexible pricing and member discount systems
- **Upcoming Episodes**: Automatic countdown timer system for scheduled episodes
- **Model Visibility**: "Hide on Homepage" checkbox to exclude models from homepage sections

### Payment System (Flowguard)

- **Embedded Payment Forms**: No redirects, seamless user experience
- **Subscription Management**: Recurring and one-time subscriptions with trials
- **PPV Purchases**: Pay-per-view episode access
- **Webhook Processing**: Real-time payment notifications and status updates
- **Admin Interface**: Complete payment management and diagnostics
- **Security**: PCI DSS compliance with 3D Secure support

### Membership System

- **Registration**: Custom forms with password strength and validation
- **Authentication**: Login/logout with dashboard integration
- **Activity Logging**: Comprehensive user activity tracking
- **Affiliate System**: Commission tracking and management

### Google SMTP Integration System

#### Smart Email Routing

- **Internal Email Detection**: Automatically routes emails to your domain through Google SMTP
- **Contact Form Support**: Seamlessly handles Contact Form 7 submissions to your domain
- **App Password Authentication**: Secure Google Workspace integration with 2FA support
- **Bounce Prevention**: Eliminates Amazon SES delivery issues to your own domain

#### Configuration

- **Admin Interface**: `FlexPress → Google SMTP` settings page
- **Default Settings**: smtp.gmail.com:587 with TLS encryption
- **Smart Routing**: "Use for Internal Emails Only" option for optimal performance
- **Testing**: Built-in email test functionality with detailed feedback

### SMTP2Go Integration System

#### Professional Email Delivery

- **Enterprise-Grade Service**: Reliable email delivery with automatic domain authentication
- **Internal Email Routing**: Perfect for contact forms and internal communications
- **No Domain Issues**: Handles domain authentication automatically, eliminating bounce problems
- **Simple Setup**: Easy configuration with built-in testing functionality
- **From Address Override**: Uses configured From email instead of WordPress defaults

#### Configuration

- **Admin Interface**: `FlexPress → SMTP2Go` settings page
- **Default Settings**: mail.smtp2go.com:587 with TLS encryption
- **Smart Routing**: "Use for Internal Emails Only" option for optimal performance
- **Testing**: Built-in connection testing and email sending functionality
- **Current Setup**: Username: `zakozbourne`, From: `zak@zakozbourne.com`, From Name: `Zak Ozbourne`

#### Smart Routing Logic

- **Domain Detection**: Automatically detects emails TO `@zakspov.com` as internal
- **Priority Order**: SMTP2Go → Google SMTP → Amazon SES (for internal emails)
- **From Address Override**: SMTP2Go uses `zak@zakozbourne.com` instead of WordPress defaults
- **Automatic Fallback**: If SMTP2Go fails, falls back to Google SMTP, then Amazon SES
- **No Manual Configuration**: System automatically routes emails based on destination

#### Implementation Details

- **Class**: `FlexPress_SMTP2Go` in `includes/class-flexpress-smtp2go.php`
- **Settings**: `FlexPress_SMTP2Go_Settings` in `includes/admin/class-flexpress-smtp2go-settings.php`
- **Routing Logic**: Handles emails TO `zakspov.com` regardless of sender domain
- **Sanitization**: Uses `sanitize_text_field()` for SMTP username (not `sanitize_email()`)
- **Debug Logging**: Comprehensive logging for troubleshooting and monitoring

### Admin Features

- **Settings Panels**: General, Video, Membership, Flowguard, Pricing, Affiliate, Contact, Google SMTP, SMTP2Go, Upcoming Episode
- **Webhook Management**: Flowguard payment processing and debugging
- **User Management**: Member profiles, purchases, activity logs
- **Email Testing**: Built-in test functionality for Google SMTP and SMTP2Go
- **Legal Pages**: Dynamic content generation for compliance
- **Automatic Episode Scheduling**: WordPress scheduled posts integration

### Frontend Features

- **Modern Dark Theme**: Vixen.com-inspired design with responsive layouts
- **Video Interface**: Hero videos, episode archives, filtering systems
- **Professional UI**: Card-based layouts with hover effects and animations
- **Legal Compliance**: 2257, privacy policy, terms, content removal forms
- **Casting Section**: Professional talent recruitment section above footer with benefits list and apply button
- **Upcoming Episode Display**: Automatic countdown timers for scheduled episodes

## Flowguard Integration Details

### API Configuration

- **Shop ID**: 134837 (from ControlCenter)
- **Signature Key**: QdqSpfTHzKKQChBB26xDcEAh3wkQtZ (from ControlCenter)
- **Environment**: Sandbox for testing, Production for live
- **Webhook URL**: `/wp-admin/admin-ajax.php?action=flowguard_webhook`

### Database Tables

- `wp_flexpress_flowguard_webhooks` - Webhook event logging
- `wp_flexpress_flowguard_transactions` - Transaction records
- `wp_flexpress_flowguard_sessions` - Payment session tracking

### Payment Pages

- `/flowguard-payment` - Embedded payment form
- `/payment-success` - Payment completion page
- `/payment-declined` - Payment failure page

### Key Files

- `includes/class-flexpress-flowguard-api.php` - API client
- `includes/flowguard-integration.php` - Helper functions
- `includes/flowguard-webhook-handler.php` - Webhook processing
- `includes/flowguard-database.php` - Database management
- `includes/admin/class-flexpress-flowguard-settings.php` - Admin interface
- `assets/js/flowguard.js` - Frontend SDK integration
- `page-templates/flowguard-payment.php` - Payment form template
- `page-templates/payment-success.php` - Success page template
- `page-templates/payment-declined.php` - Declined page template

## Documentation Requirements

- **README.md**: Must be updated immediately when features are added/modified
- **Implementation Docs**: Feature-specific documentation in dedicated .md files
- **Code Comments**: Inline documentation for complex functions and integrations
- **Version Control**: All changes must include descriptive commit messages

## Security Notes

- Change default passwords in production
- Use environment variables for sensitive data
- Enable SSL in production
- Regular security updates required
- Flowguard webhook signature validation
- Secure video token generation

## Migration Notes

- **Verotel Integration**: Legacy Verotel files are still included but marked for removal
- **Flowguard Priority**: Flowguard is now the primary payment system
- **Backward Compatibility**: Existing user data is preserved during migration
- **Testing**: All payment flows should be tested in sandbox mode before production

## Turnstile Test Tool Behavior

- The admin Test Connection button uses AJAX to call WordPress `admin-ajax.php` with a nonce.
- The tool now reports success if the Cloudflare API is reachable and returns JSON, even when validation errors occur due to a missing user token (e.g., `missing-input-response`).
- If the API is unreachable, a clear error is shown instead of "undefined".

## WordPress Development Environment

### IDE Configuration

- **WordPress Stubs**: Use `wordpress-stubs.php` for function recognition
- **PHP CodeSniffer**: WordPress coding standards via composer
- **IntelliSense**: Configured for WordPress functions and classes
- **Linting**: WordPress-specific rules and best practices

### Code Quality Standards

- **WordPress Coding Standards**: Follow WPCS guidelines
- **Security**: Sanitize all inputs, escape all outputs
- **Performance**: Optimize database queries, use caching
- **Accessibility**: WCAG 2.1 AA compliance
- **SEO**: Semantic HTML, proper meta tags

### Development Workflow

1. **Feature Development**: Create in theme directory
2. **Testing**: Test in Docker environment
3. **Code Review**: Use PHPCS for standards compliance
4. **Documentation**: Update README.md and inline comments
5. **Deployment**: Commit with descriptive messages

### Common WordPress Functions

- **Template Functions**: `get_header()`, `get_footer()`, `get_template_part()`
- **Data Functions**: `get_option()`, `get_post_meta()`, `get_user_meta()`
- **Security Functions**: `esc_html()`, `esc_attr()`, `esc_url()`, `wp_nonce_field()`
- **Admin Functions**: `add_menu_page()`, `register_setting()`, `add_settings_field()`
- **Query Functions**: `WP_Query`, `wp_reset_postdata()`, `have_posts()`

### Theme Structure

- **Template Hierarchy**: Follow WordPress template hierarchy
- **Hooks & Filters**: Use WordPress action and filter system
- **Custom Post Types**: Register with proper capabilities
- **Taxonomies**: Create custom taxonomies for content organization
- **Widgets**: Develop custom widgets for admin interface
- **Shortcodes**: Create reusable content shortcodes

### Performance Optimization

- **Database Queries**: Minimize queries, use transients
- **Asset Loading**: Enqueue scripts/styles properly
- **Caching**: Implement object caching where appropriate
- **Images**: Optimize images, use responsive images
- **CDN**: Leverage BunnyCDN for static assets

### Security Best Practices

- **Input Validation**: Validate all user inputs
- **Output Escaping**: Escape all output data
- **Nonces**: Use WordPress nonces for forms
- **Capabilities**: Check user capabilities before actions
- **SQL Injection**: Use prepared statements
- **XSS Prevention**: Escape output, validate input

### Testing Strategy

- **Unit Tests**: Test individual functions
- **Integration Tests**: Test WordPress integration
- **Browser Tests**: Test frontend functionality
- **Performance Tests**: Monitor page load times
- **Security Tests**: Scan for vulnerabilities
- **Accessibility Tests**: Ensure WCAG compliance
