# FlexPress WordPress Theme Development Rules

## Project Overview
FlexPress is a premium WordPress theme for content creators (primarily adult content) that integrates:
- **Flowguard Payment System** - Modern embedded payment processing with webhooks
- **BunnyCDN Stream & Storage** - Video streaming and file hosting
- **Advanced Content Management** - Episodes, models, galleries, access control
- **Comprehensive Admin System** - Built-in settings and management tools

This is a WordPress website project running in Docker containers with the following setup:
- WordPress: Port 8085 (http://localhost:8085)
- phpMyAdmin: Port 8086 (http://localhost:8086)
- MySQL Database: Internal container network
- Live Site: https://zakspov.com (production site)
- Test Site: https://zakspov.com (development data only)

Do all pupeteer tests on the test site.

## Docker Configuration
- Main service: `wordpress` (custom build)
- Database: `mysql:8.0`
- Admin: `phpmyadmin/phpmyadmin`
- Network: `flexpress_network`

## Development Guidelines
- Always use IP addresses instead of localhost when configuring servers
- Avoid port 3000 (reserved for MCP tools)
- Use port 8085 for WordPress (8083 was occupied)
- **ALL DEVELOPMENT WORK MUST BE CONTAINED WITHIN THE FLEXPRESS THEME DIRECTORY** (`wp-content/themes/flexpress/`)
- **ALWAYS UPDATE README.md AS FEATURES ARE DEVELOPED** - Document new features, integrations, and capabilities
- All WordPress customizations go in `wp-content/` directory
- Database credentials are in `.env` file

## File Structure
```
flexpress/
├── docker-compose.yml    # Main Docker configuration
├── Dockerfile           # Custom WordPress image (includes WP-CLI)
├── apache-config.conf   # Apache configuration
├── wp-cli.sh            # WP-CLI wrapper script
├── .env                 # Environment variables
├── .env.example         # Environment template
├── wp-content/          # WordPress customizations
└── README.md            # Project documentation
```

## Commands
- Start: `docker-compose up -d`
- Stop: `docker-compose down`
- Logs: `docker-compose logs -f`
- Rebuild: `docker-compose up --build -d`
- WP-CLI: `./wp-cli.sh [command]` (e.g., `./wp-cli.sh --version`, `./wp-cli.sh help`)

## Theme Features & Integrations

### Core Integrations
- **Flowguard Payment System**: Complete payment processing with embedded forms, webhooks, subscriptions, PPV purchases
- **BunnyCDN Stream**: Video hosting, streaming, and thumbnail generation
- **BunnyCDN Storage**: Image galleries and file management
- **Advanced Custom Fields (ACF)**: Content management and admin interfaces

### Content Management
- **Episodes**: Video content with access control (free/PPV/membership/mixed)
- **Models**: Performer profiles with relationship linking
- **Galleries**: Image galleries attached to episodes with BunnyCDN Storage
- **Access Control**: Flexible pricing and member discount systems

### Payment System (Flowguard)
- **Embedded Payment Forms**: No redirects, seamless user experience
- **Subscription Management**: Recurring and one-time subscriptions with trials
- **PPV Purchases**: Pay-per-view episode access
- **Webhook Processing**: Real-time payment notifications and status updates
- **Admin Interface**: Complete payment management and diagnostics
- **Security**: PCI DSS compliance with 3D Secure support

### Membership System
- **Registration**: Custom forms with password strength and validation
- **Authentication**: Login/logout with dashboard integration
- **Activity Logging**: Comprehensive user activity tracking
- **Affiliate System**: Commission tracking and management

### Admin Features
- **Settings Panels**: General, Video, Membership, Flowguard, Pricing, Affiliate, Contact
- **Webhook Management**: Flowguard payment processing and debugging
- **User Management**: Member profiles, purchases, activity logs
- **Legal Pages**: Dynamic content generation for compliance

### Frontend Features
- **Modern Dark Theme**: Vixen.com-inspired design with responsive layouts
- **Video Interface**: Hero videos, episode archives, filtering systems
- **Professional UI**: Card-based layouts with hover effects and animations
- **Legal Compliance**: 2257, privacy policy, terms, content removal forms

## Flowguard Integration Details

### API Configuration
- **Shop ID**: 134837 (from ControlCenter)
- **Signature Key**: QdqSpfTHzKKQChBB26xDcEAh3wkQtZ (from ControlCenter)
- **Environment**: Sandbox for testing, Production for live
- **Webhook URL**: `/wp-admin/admin-ajax.php?action=flowguard_webhook`

### Database Tables
- `wp_flexpress_flowguard_webhooks` - Webhook event logging
- `wp_flexpress_flowguard_transactions` - Transaction records
- `wp_flexpress_flowguard_sessions` - Payment session tracking

### Payment Pages
- `/flowguard-payment` - Embedded payment form
- `/payment-success` - Payment completion page
- `/payment-declined` - Payment failure page

### Key Files
- `includes/class-flexpress-flowguard-api.php` - API client
- `includes/flowguard-integration.php` - Helper functions
- `includes/flowguard-webhook-handler.php` - Webhook processing
- `includes/flowguard-database.php` - Database management
- `includes/admin/class-flexpress-flowguard-settings.php` - Admin interface
- `assets/js/flowguard.js` - Frontend SDK integration
- `page-templates/flowguard-payment.php` - Payment form template
- `page-templates/payment-success.php` - Success page template
- `page-templates/payment-declined.php` - Declined page template

## Documentation Requirements
- **README.md**: Must be updated immediately when features are added/modified
- **Implementation Docs**: Feature-specific documentation in dedicated .md files
- **Code Comments**: Inline documentation for complex functions and integrations
- **Version Control**: All changes must include descriptive commit messages

## Security Notes
- Change default passwords in production
- Use environment variables for sensitive data
- Enable SSL in production
- Regular security updates required
- Flowguard webhook signature validation
- Secure video token generation

## Migration Notes
- **Verotel Integration**: Legacy Verotel files are still included but marked for removal
- **Flowguard Priority**: Flowguard is now the primary payment system
- **Backward Compatibility**: Existing user data is preserved during migration
- **Testing**: All payment flows should be tested in sandbox mode before production