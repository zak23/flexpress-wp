Always use IP instead of localhost
Never use port 3000 (reserved for MCP tools)
WordPress on port 8085; phpMyAdmin on 8086
All theme work inside `wp-content/themes/flexpress/`
Update `README.md` in project root and theme for any feature changes
Cache: Redis enabled; logged-in HTML private/no-store; add `Vary: Cookie`; never cache HTML via service worker
Use Puppeteer tests against the test site; prefer IPs for navigation and screenshots
PHP indent: 4 spaces; JS: 2 spaces; CSS: 2 spaces
Do not alter `.wakatime-project` once created

## FlexPress Admin Menu Organization Pattern

- **Menu Structure**: Organized submenu structure under FlexPress main menu
  - General: Core site settings (logo, colors, site info)
  - Awards: Awards & Recognition section settings
  - Featured On: Media outlets and publications settings
  - Coming Soon: Maintenance mode settings
  - Pages & Menus: Page and menu management tools
  - Auto-Setup: Setup and configuration tools
  - Integrations: Discord, Turnstile, Plunk, SMTP, etc.
- **Settings Classes**: Each major feature has its own settings class
  - `FlexPress_Awards_Settings`: Awards & Recognition functionality
  - `FlexPress_Featured_On_Settings`: Featured On section management
  - `FlexPress_Coming_Soon_Settings`: Coming Soon mode configuration
- **Data Persistence**: All settings use `flexpress_general_settings` option for backward compatibility
- **Menu Registration**: Add submenu items in `class-flexpress-settings.php` using `add_submenu_page()`
- **Render Methods**: Each settings class has its own `render_*_settings_page()` method
- **Documentation**: Update README.md with new menu locations when reorganizing settings

## Coming Soon Mode Implementation Pattern

- Settings: Add to `class-flexpress-coming-soon-settings.php` with proper sanitization
- Template: Create dedicated template in `page-templates/` directory
- Redirect: Use `template_redirect` hook with priority 1 for early interception
- Admin bypass: Check `current_user_can('manage_options')` before redirect
- Whitelist Logic: Check `is_page($whitelist_array)` before redirect for page exceptions
- Assets: Create dedicated CSS/JS files in `assets/` directory
- Helper Function: Use `flexpress_is_coming_soon_enabled()` to check status in templates
- Documentation: Update README.md and .cursorrules with feature details

## Casting Requirements Implementation Pattern

- Data Structure: Use JSON format in ACF textarea fields for structured content
- Template: Leverage existing template structure with conditional rendering
- Styling: Utilize existing CSS classes for consistent design
- Icons: Use FontAwesome classes for visual consistency
- Content Management: Store requirements in `casting_requirements_cards` ACF field
- JSON Format: `[{"icon_class": "fas fa-icon", "title": "Category", "requirements": ["item1", "item2"]}]`
- Documentation: Update README.md with feature details and technical implementation

## Tag Collection System Implementation Pattern

- ACF Fields: Add collection metadata fields to `post_tag` taxonomy in `includes/acf-fields.php`
- Helper Functions: Create collection detection and metadata functions in `functions.php`
- Template: Create `tag.php` template with collection detection and enhanced layouts
- Styling: Add collection-specific CSS with gradients and animations in `main.css`
- Integration: Update episode archive filtering to show collection badges and direct links
- Navigation: Enhance single episode pages to show collection links with badges
- Detection: Use `flexpress_is_collection_tag()` to check if tag is a collection
- Metadata: Use `flexpress_get_collection_metadata()` to get collection settings
- Ordering: Support newest, oldest, alphabetical, and custom episode ordering
- Documentation: Update README.md with collection system details and usage examples

## Featured Banner System Implementation Pattern

- Settings: Add to `class-flexpress-general-settings.php` with proper sanitization
- Template: Create dedicated template in `template-parts/` directory
- Integration: Add template part to homepage below featured episodes section
- Assets: Add CSS styles to `main.css` with hover effects and responsive design
- Media Uploader: Use WordPress media library with preview and remove functionality
- Sanitization: Use `absint()` for image IDs, `esc_url_raw()` for URLs, checkbox validation
- Accessibility: Include proper alt text, ARIA labels, and semantic HTML
- Responsive: Mobile-optimized with disabled hover effects on small screens
- Documentation: Update README.md with feature details and technical implementation
